=======================
=== Orthanc Roadmap ===
=======================

For higher-level ideas in the roadmap, please first read the
"Contributing to Orthanc" section of the Orthanc Book:
https://book.orthanc-server.com/contributing.html


Some features are being funded by an OpenCollective one-time donations.
selected features are marked with priorities ((1) - higher, (2) - medium, (3) - nice to have)

=======
General
=======

* Configure an user-defined site UID root if generating DICOM UIDs
  ("FromDcmtkBridge::GenerateUuid()")
* Improve handling of errors in the command queue:
  https://groups.google.com/d/msg/orthanc-users/--njEbqcDDI/rBu8XL-Mm-cJ
* Support partial file retrieval in Orthanc::HttpClient
* Support retry counter in Orthanc::HttpClient
* Option to enable DNS lookups in DICOM:
  https://hg.orthanc-server.com/orthanc/file/Orthanc-1.9.3/OrthancFramework/Sources/OrthancFramework.cpp#l88
* Toolbox::ComputeMD5() fails on files larger than 4GB
* Add an option to run Orthanc in read-only mode both for DICOM and for Rest API.
* Logging: add some information like Thread-Id to contextualize the logs
* (1) Accept extra DICOM tags dictionaries in the DCMTK format '.dic' (easier to use than declare
  them in the Orthanc configuration file).  Even the standard dictionaries could be 
  overriden by these custom dictionaries.
* Provide more flexibility wrt Dicom TLS ciphers and TLS version:
  https://groups.google.com/g/orthanc-users/c/X4IhmXCSr7I/m/EirawAFcBwAJ
* Provide a configuration option related to MaximumStorageSize: instead of 
  recycling older patients, simply block new ingests (from DICOM/DICOMweb/API)
  by returning out-of-resource status (HTTP or DIMSE)


============================
Documentation (Orthanc Book)
============================

* Write a getting started guide (step by step) for each platform to replace
  https://book.orthanc-server.com/users/cookbook.html :
  - Ubuntu/Debian
  - Windows
  - OSX
  - Docker on Linux
  Each step by step guide should contain:
  - get binaries
  - launch
  - open explorer
  - edit configuration file
  - restart and observe changes

* Explain how log rotation can be achieved (no built-in support in Orthanc)
* Explain how to interface with Mirth/NextGen Connect
  https://en.wikipedia.org/wiki/NextGen_Connect
* How to reproduce issues by replacing Orthanc with storescp or wlmscpfs
* How to capture TCP traffic of DICOM protocol using tcpdump and Wireshark
* Add more configurations of viewers (Weasis, Slicer...):
  https://book.orthanc-server.com/integrations.html
* Discuss HL7 in a dedicated page:
  https://groups.google.com/d/msg/orthanc-users/4dt4992O0lQ/opTjTFU2BgAJ
  https://groups.google.com/g/orthanc-users/c/Spjtcj9vSPo/m/ktUArWxUDQAJ


================
Orthanc Explorer
================

* Option to tune the number of results for a local lookup:
  https://groups.google.com/g/orthanc-users/c/LF39musq02Y/


========
REST API
========

--------
Mid-term
--------

* (1) Archive jobs: Resume downloads using "range requests":
  https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests
* (3) Create DICOM from DICOMweb JSON ("application/dicom+json")
  with "/tools/create-dicom"
* (2) Create multi-frame images with /tools/create-dicom (by adding a
  "MultiFrame" flag to avoid creating a series), or modify PixelData
  of a multi-frame image:
  https://groups.google.com/g/orthanc-users/c/y3-xa_GcdLM/m/m0Kr5G5UPAAJ
* (1) Specify the transfer syntax in /tools/create-dicom
* (1) In the /studies/{id}/anonymize route, add an option to remove
  secondary captures.  They usually contains Patient info in the
  image. The SOPClassUID might be used to identify such secondary
  captures.
* Support "/preview" and "/matlab" for LUT color images
* Try to transcode files if a simple decoding fails:
  https://groups.google.com/g/orthanc-users/c/b8168-NkAhA/m/Df3j-CO9CgAJ
* (1) Add asynchronous mode in "/modalitities/.../move" for C-MOVE SCU:
  https://groups.google.com/g/orthanc-users/c/G3_jBy4X4NQ/m/8BanTsdMBQAJ
* (2) Ranges of DICOM tags for "Keep" and "Remove" in ".../modify" and ".../anonymize": 
  https://groups.google.com/g/orthanc-users/c/6dETktKo9v8/m/b0LUvSfwAgAJ
* return error code/reason in HTTP response if resubmit/cancel/pause fails ...

---------
Long-term
---------

* Stick to the JSONapi or JAREST guidelines for a "v2" of the API:
  https://groups.google.com/forum/#!msg/orthanc-users/Bag-SwEE9ZI/-w7QXI6p7-oJ
  http://www.admiraalit.nl/jarest/


=====
DICOM
=====

--------
Mid-term
--------

* Support C-GET SCU (note that C-GET SCP was introduced in Orthanc 1.7.0)
* Support "Retrieve AE Title" (0008,0054) in C-FIND:
  - On SCP side: done by https://hg.orthanc-server.com/orthanc/rev/1ec3e1e18f50
  - On SCU side:
    https://groups.google.com/d/msg/orthanc-users/wPl0g5mqZco/5X1Z8tEzBgAJ
* Check Big Endian transfer syntax in ParsedDicomFile::EmbedImage and
  DicomImageDecoder
* Strict hierarchical C-FIND:
  https://groups.google.com/d/msg/orthanc-users/VBHpeGVSNKM/tkaVvjWFBwAJ
* report DIMSE error codes in Rest API and job status for /store /query /move /retrieve
* Log outgoing C-Find queries

---------
Long-term
---------

* Support extended association (e.g. for C-Find relational queries):
  https://groups.google.com/d/msg/orthanc-users/xD4d3mpc6ms/srF7E2goAAAJ
* Support C-MOVE-CANCEL:
  https://groups.google.com/d/msg/orthanc-users/KnduYBFd06A/o86cl5SeCAAJ

--------------------
Internationalization
--------------------

* Support multiple specific character sets (cf. "SCSH32" in orthanc-tests)
  - http://dicom.nema.org/medical/dicom/current/output/chtml/part03/sect_C.12.html#sect_C.12.1.1.2
  - Japanese test: http://dicom.nema.org/MEDICAL/dicom/2017c/output/chtml/part05/sect_H.3.2.html
* Support Supplementary Kanji set (ISO 2022 IR 159)
* Create DICOM files with multibyte encodings (Korean, JapaneseKanji, SimplifiedChinese)


===========
Performance
===========

* (3) ServerContext::DicomCacheLocker => give access to the raw buffer,
  useful in ServerContext::DecodeDicomInstance()
* (2) DicomMap: create a cache to the main DICOM tags index
* (3) Check out rapidjson: https://github.com/miloyip/nativejson-benchmark
* For C-Find results: we could store the computed tags
    in metadata on some events like NewSeries + DeletedSeries (same for other computer tags).
    OtherTags that could be saved in Metadata as well:
    - ModalitiesInStudy
    - all computed counters at series/study/patient level
    - RequestAttributesSequence (sequence that must be included in all DicomWeb QIDO-RS for series)

* Long-shot & not sure it is even feasible at all: try to reduce memory usage by implementing streaming
  when receiving DICOM instances from the Rest API or from DICOM and store files directly to disk as they
  are received.  Note that this would likely require rewriting large parts of Orthanc.  Note sure that 
  would be compatible with Transcoding.
  Use case: receiving 10 1GB instances in parallel can consume up to 20 GB
  Alternative option 1: write an "external application/plugin" that would take care of these receptions, write the
  file at the right place and send a signal to Orthanc to "adopt" the file.
  Alternative option 2: declare a memory resource (X GB) that is available for reception.  Every time
  Orthanc starts receiving a file, it reserves the memory or twice the memory (through a Semaphore)
  if no memory is available, it waits and possibly timeouts returning a 503 or DIMSE A700 (out of resources).
  This would at least protect from "out of memory" crashes.


========
Database
========

* Integration test searching for "\" and "%" in PatientName, PatientID...


=======
Plugins
=======

---
SDK
---

* Implement PluginsJob::GetOutput() to allow user-defined jobs to provide output:
  https://groups.google.com/g/orthanc-users/c/GZ7u0bTTVoo/m/Z7iTNTi2BgAJ
* Add plugins for normalized operations (notably so as to support
  Print SCU/SCP, cf. "dcmprscp"):
  https://web.archive.org/web/20170923150432/https://www.medicalconnections.co.uk/kb/DICOM_Print_Service
* Provide access to the Orthanc::DicomUserConnection class in plugins:
  https://groups.google.com/d/msg/orthanc-users/ycDA1xPuTRY/nsT2_GOtEgAJ
* Provide a C++ callback similar to "ReceivedInstanceFilter()" in Lua
  https://book.orthanc-server.com/users/lua.html#filtering-incoming-dicom-instances
  https://groups.google.com/d/msg/orthanc-users/BtvLTE5Ni8A/vIMhmMgfBAAJ
* In "OrthancPluginLog[Error|Warning|Info]()", prefix the log line with
  the name of the plugin, as retrieved by "OrthancPluginGetName()"
* Update the SDK to handle buffer sizes > 4GB (all sizes are currently coded in uint32_t)

----------------
Ideas of plugins
----------------

* DICOM-RT primitives (RT-STRUCT, RT-PLAN, RT-DOSE)
* Converter to/from NIfTI
* Decode JPEG2k with grok: https://github.com/GrokImageCompression/grok
* Generate dynamic HTTP content using Lua:
  https://groups.google.com/d/msg/orthanc-users/KompazkxRSs/5Rh03mzgDAAJ
* More generally, expose more callbacks of the plugin SDK in Lua:
  https://groups.google.com/d/msg/orthanc-users/_FbiRHuXPGM/J-OAv7zaCAAJ
* Configuration interface plugin
* Delayed deletion plugin: 
  https://bugs.orthanc-server.com/show_bug.cgi?id=186#c2


===
Lua
===

* Configure HTTP headers from Lua (in HttpGet(), HttpPost(),
  HttpPut(), HttpDelete(), RestApiGet(), RestApiPost(), RestApiPut()
  and RestApiDelete().
  https://groups.google.com/forum/#!msg/orthanc-users/WNnW187OILM/6XX_bm96BwAJ


================
Code refactoring
================

* Use Semaphore::Locker everywhere (instead of explicit
  Release() and Acquire())
* Avoid direct calls to FromDcmtkBridge (make most of its 
  methods private), go through ParsedDicomFile wherever possible


=================
Platform-specific
=================

---------
Packaging
---------

* RHEL through EPEL (as of 2021, CentOS seems to be over):
  http://fedoraproject.org/wiki/EPEL_Package_Maintainers
* Fedora: Are DICOM dictionaries correctly located?
  https://groups.google.com/g/orthanc-users/c/YB_LTBuUQNA/m/3H1xsrZJDgAJ

------------------------
Big-endian architectures
------------------------

* Check the generated 16bpp PNG images

-----------------
Microsoft Windows
-----------------

* Add compatibility with non-ASCII paths (Orthanc expresses its paths
  as UTF-8 strings, but Windows expects them to be translated to the 
  system locale)


====
Misc
====

-----------------
Maintenance tools
-----------------

* Standalone tool to detect corrupted files:
  https://groups.google.com/g/orthanc-users/c/KASEJ9Gx3vQ/m/MIJFJdRhAwAJ
* Standalone tool to detect orphan files in OrthancStorage

----------------------------------
Code quality and integration tests
----------------------------------

* Have a look at openQA (cf. GNU Health)
* Add integration tests for LUT
* Add more complex testing scenarios like data-migration, change of 
  configuration files, multiple orthanc interacting togethers with various 
  config.  This should probably look like the python toolbox tests ...
  

---------------------
External applications
---------------------

* Create REST bindings with Slicer
* Create REST bindings with Horos/OsiriX
